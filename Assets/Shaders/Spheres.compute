//In HLSL all function or variable declaration needs to appear *before* it is used

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
float2 _PixelOffset;
static const float PI = 3.14159265f;


struct Ray {
    float3 origin;
    float3 direction;
};

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
};

//initialize a rayhit
RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

//initialize a ray
Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    
    //Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    //Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    //Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    
    //Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;

    if(t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

//There can be two ray hit candidates:
//  The entry point p1 - p2
//  or the exit point p1 + p2
//  We check the entry point first and only use the exit point if the other one is not valid
//  A sphere in our case is defined as a float4 comprised of position (xyz) and a radius (w)
//Can add a sphere to our view we call the function from Trace, ex) IntersectSphere(ray, bestHit, float4(0, 3.0f, 0, 1.0f));
void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere) {

    //Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if(p2sqr < 0) {
        return;
    }

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if(t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}

RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();
    IntersectSphere(ray, bestHit, float4(0, 3.0f, 0, 1.0f));
    IntersectGroundPlane(ray, bestHit);
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit) {

    //if the the ray hit something, return the normal of the thing it hit (which makes the color equal to the normal)
    if(hit.distance < 1.#INF) 
    {
        //Return the normal
        return hit.normal * 0.5f + 0.5f;
    
    //else if the ray didn't hit anything, sample the skybox and return it
    } else {
        //Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    //Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width,height) * 2.0f - 1.0f);

    //Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    //Trace and Shade
    RayHit hit = Trace(ray);
    float3 result = Shade(ray, hit);
    Result[id.xy] = float4(result, 1);


}
