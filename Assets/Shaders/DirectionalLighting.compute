//In HLSL all function or variable declaration needs to appear *before* it is used

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

static const float PI = 3.14159265f;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
float2 _PixelOffset;
float4 _DirectionalLight;


struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
};

//initialize a rayhit
RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

//initialize a ray
Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    
    //Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    //Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    //Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    
    //Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;

    if(t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

//There can be two ray hit candidates:
//  The entry point p1 - p2
//  or the exit point p1 + p2
//  We check the entry point first and only use the exit point if the other one is not valid
//  A sphere in our case is defined as a float4 comprised of position (xyz) and a radius (w)
//Can add a sphere to our view we call the function from Trace, ex) IntersectSphere(ray, bestHit, float4(0, 3.0f, 0, 1.0f));
void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere) {

    //Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
    if(p2sqr < 0) {
        return;
    }

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if(t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.xyz);
    }
}

RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();

    for(float i = 0; i < 10; i++) {
        for(float j = 0; j < 10; j++) {
            IntersectSphere(ray, bestHit, float4(i, 3.0f, j, 0.5f));
        }
    }
    IntersectGroundPlane(ray, bestHit);
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{   
    //if we hit something
    if (hit.distance < 1.#INF)
    {
        float3 specular = float3(0.04f, 0.04f, 0.04f);
        float3 albedo = float3(0.8f, 0.8f, 0.8f);
        // Reflect the ray and multiply energy with specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= specular;

        //Shadow test ray
        //We send out a "shadow" ray that checks to see if it makes it back to the view, if it doesn't then there should be shadow there and we return black instead of the diffuse light
        //add a little offset to remove any self-shadowing
        bool shadow = false;
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != 1.#INF)
        {
            return float3(0.0f, 0.0f, 0.0f);
        }

        // Return adiffuse-shaded color
        //Remember that the dot product is defined as a⋅b=||a|| ||b||cosθ.
        //Since both our vectors (the normal and the light direction) are of unit length, the dot product is exactly what we are looking for: the cosine of the angle.
        //The ray and the light are pointing in opposite directions, so for head-on lighting the dot product returns -1 instead of 1. We need to flip the sign to make up for this.
        //Finally, we saturate this value (i.e. clamp it to [0,1] range) to prevent negative energy.

        return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * albedo;
    }

    //else if we hit nothing aka the sky
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    //Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width,height) * 2.0f - 1.0f);

    //Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    //Trace and Shade
    float3 result = float3(0, 0, 0);
    
    //bounce the ray 8 times
    for (int i = 0; i < 8; i++)
    {   
        //get the hit every bounce
        RayHit hit = Trace(ray);

        //add up the color of where the ray bounced times its current energy
        result += ray.energy * Shade(ray, hit);

        //if the ray has no more energy don't bounce anymore
        if (!any(ray.energy))
            break;
    }
    
    Result[id.xy] = float4(result, 1);


}
